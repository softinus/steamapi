import "steammessages_base.proto";

enum ERemoteClientBroadcastMsg {
	k_ERemoteClientBroadcastMsgDiscovery = 0;
	k_ERemoteClientBroadcastMsgStatus = 1;
	k_ERemoteClientBroadcastMsgOffline = 2;
}

enum ERemoteClientService {
	k_ERemoteClientServiceNone = 0;
	k_ERemoteClientServiceRemoteControl = 1;
}

message CMsgRemoteClientBroadcastHeader {
	optional uint64 client_id = 1;
	optional .ERemoteClientBroadcastMsg msg_type = 2 [default = k_ERemoteClientBroadcastMsgDiscovery];
}

message CMsgRemoteClientBroadcastStatus {
	message User {
		optional fixed64 steamid = 1;
		optional uint32 auth_key_id = 2;
	}

	optional int32 version = 1;
	optional int32 min_version = 2;
	optional uint32 connect_port = 3;
	optional string hostname = 4;
	optional uint32 enabled_services = 6;
	optional int32 ostype = 7 [default = 0];
	optional bool is64bit = 8 [default = false];
	repeated .CMsgRemoteClientBroadcastStatus.User users = 9;
}

message CMsgRemoteClientBroadcastDiscovery {
	optional uint32 seq_num = 1;
}

message CMsgRemoteClientAppStatus {
	message AppUpdateInfo {
		optional fixed32 time_update_start = 1;
		optional uint64 bytes_to_download = 2;
		optional uint64 bytes_downloaded = 3;
		optional uint64 bytes_to_process = 4;
		optional uint64 bytes_processed = 5;
		optional int32 estimated_seconds_remaining = 6 [default = -1];
		optional int32 update_result = 7;
	}

	message ShortcutInfo {
		optional string name = 1;
		optional string icon = 2;
		repeated string categories = 3;
	}

	message AppStatus {
		optional uint32 app_id = 1;
		optional uint32 app_state = 2;
		optional .CMsgRemoteClientAppStatus.AppUpdateInfo update_info = 3;
		optional .CMsgRemoteClientAppStatus.ShortcutInfo shortcut_info = 4;
	}

	repeated .CMsgRemoteClientAppStatus.AppStatus status_updates = 1;
}

message CMsgRemoteClientAuth {
	optional uint64 client_id = 1;
	optional .CMsgRemoteClientBroadcastStatus status = 2;
}

message CMsgRemoteClientAuthResponse {
	optional int32 eresult = 1 [default = 2];
}

message CMsgRemoteClientStartStream {
	optional uint32 app_id = 1;
	optional int32 environment = 2;
	optional bool has_gamepad = 3;
	optional int32 launch_option = 4 [default = -1];
	optional bool lock_parental_lock = 5 [default = false];
	optional string unlock_parental_lock = 6;
	optional int32 maximum_resolution_x = 7;
	optional int32 maximum_resolution_y = 8;
	optional int32 gamepad_count = 9;
}

message CMsgRemoteClientStartStreamResponse {
	optional int32 e_launch_result = 1 [default = 2];
	optional uint32 stream_port = 2;
	repeated int32 launch_options = 3;
	optional bytes auth_token = 4;
}

message CMsgRemoteClientPing {
}

message CMsgRemoteClientPingResponse {
}

message CMsgRemoteClientAcceptEULA {
	repeated uint32 app_id = 1;
}

message CMsgRemoteClientGetControllerConfig {
	optional uint32 app_id = 1;
	optional int32 window_type = 2;
	optional uint32 controller_index = 3;
}

message CMsgRemoteClientGetControllerConfigResponse {
	optional int32 eresult = 1 [default = 2];
	optional bytes config_vdf = 2;
}

